# syntax=docker/dockerfile:1

ARG PYTHON_VERSION=3.9.6
FROM python:${PYTHON_VERSION}-slim as base

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

# Set working directory variable.
ARG APP_DIR=/app
# Set working directory
WORKDIR /app

# Install Pipenv and project dependencies
RUN --mount=type=bind,source=Pipfile.lock,target=Pipfile.lock \
    --mount=type=bind,source=Pipfile,target=Pipfile \
    python -m pip install --upgrade pip && \
    pip install pipenv && \
    pipenv install --system --ignore-pipfile --deploy --dev

# Copy the source code into the container.
COPY ./cine_book_api/ ./cine_book_api

# Create a non-privileged user that the app will run under.
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser &&\
    chown -R appuser $APP_DIR

# Switch to the non-privileged user to run the application.
USER appuser

# Expose the port that the application listens on.
EXPOSE 8000

# Add the current directory to the Python path
ENV PYTHONPATH "${PYTHONPATH}:$APP_DIR"

# Run the application.
CMD ["gunicorn", "-b", "0.0.0.0:8000", "--timeout", "180", "--workers", "1", "--reload", "cine_book_api.cine_book_api.wsgi:application"]